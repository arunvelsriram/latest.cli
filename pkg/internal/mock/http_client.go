// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/common/http_client.go

// Package mock is a generated GoMock package.
package mock

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// HTTPClient is a mock of HTTPClient interface
type HTTPClient struct {
	ctrl     *gomock.Controller
	recorder *HTTPClientMockRecorder
}

// HTTPClientMockRecorder is the mock recorder for HTTPClient
type HTTPClientMockRecorder struct {
	mock *HTTPClient
}

// NewHTTPClient creates a new mock instance
func NewHTTPClient(ctrl *gomock.Controller) *HTTPClient {
	mock := &HTTPClient{ctrl: ctrl}
	mock.recorder = &HTTPClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *HTTPClient) EXPECT() *HTTPClientMockRecorder {
	return m.recorder
}

// Do mocks base method
func (m *HTTPClient) Do(req *http.Request) (*http.Response, error) {
	ret := m.ctrl.Call(m, "Do", req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do
func (mr *HTTPClientMockRecorder) Do(req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*HTTPClient)(nil).Do), req)
}
